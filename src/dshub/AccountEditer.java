/*
 * AccountEditer.java
 *
 * DSHub ADC HubSoft
 * Copyright (C) 2007  Pietricica
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

package dshub;

import java.util.Date;

/**
 *
 * @author  Pietricica
 */
public class AccountEditer extends javax.swing.JFrame
{
    String CID;
    nod curAcc;
    /** Creates new form AccountEditer */
    public AccountEditer (String regCID)
    {
        initComponents ();
        CID=regCID;
        curAcc=reg_config.getnod (CID);
        /* java.awt.EventQueue.invokeLater (new Runnable ()
        {
            public void run ()
            {
               // new AccountEditer ().setVisible (true);
            }
        });*/
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        accNI = new javax.swing.JTextField();
        accCID = new javax.swing.JTextField();
        accIP = new javax.swing.JTextField();
        accOwn = new javax.swing.JTextField();
        accRegTime = new javax.swing.JTextField();
        lastlogin = new javax.swing.JTextField();
        timespentonline = new javax.swing.JTextField();
        ipstart = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        ipend = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        checkflyable = new javax.swing.JCheckBox();
        checkkey = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        overridespam = new javax.swing.JCheckBox();
        checkrenameable = new javax.swing.JCheckBox();
        checkkickable = new javax.swing.JCheckBox();
        passsetcheck = new javax.swing.JCheckBox();
        checkhidden = new javax.swing.JCheckBox();
        sharecheck = new javax.swing.JCheckBox();
        overrideshare = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        checknickprotect = new javax.swing.JCheckBox();
        hubfullcheck = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        adc = new javax.swing.JCheckBox();
        port = new javax.swing.JCheckBox();
        reg = new javax.swing.JCheckBox();
        ureg = new javax.swing.JCheckBox();
        listreg = new javax.swing.JCheckBox();
        mass = new javax.swing.JCheckBox();
        kick = new javax.swing.JCheckBox();
        drop = new javax.swing.JCheckBox();
        unban = new javax.swing.JCheckBox();
        bancid = new javax.swing.JCheckBox();
        banip = new javax.swing.JCheckBox();
        bannick = new javax.swing.JCheckBox();
        history = new javax.swing.JCheckBox();
        cmdhistory = new javax.swing.JCheckBox();
        info = new javax.swing.JCheckBox();
        hideme = new javax.swing.JCheckBox();
        password = new javax.swing.JCheckBox();
        mynick = new javax.swing.JCheckBox();
        help = new javax.swing.JCheckBox();
        about = new javax.swing.JCheckBox();
        gui = new javax.swing.JCheckBox();
        stats = new javax.swing.JCheckBox();
        cfg = new javax.swing.JCheckBox();
        topic = new javax.swing.JCheckBox();
        usercount = new javax.swing.JCheckBox();
        rename = new javax.swing.JCheckBox();
        restart = new javax.swing.JCheckBox();
        quit = new javax.swing.JCheckBox();
        listban = new javax.swing.JCheckBox();
        grant = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Account");
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener()
        {
            public void windowGainedFocus(java.awt.event.WindowEvent evt)
            {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt)
            {
            }
        });

        jButton1.setText("Save and Close");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Account on");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel6.setText("Regged at:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel2.setText("Account CID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel3.setText("Last Nick used:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel5.setText("Regged by:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel4.setText("Last IP address used:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel9.setText("Time spent online:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel8.setText("Last LogIn:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel10.setText("IP restriction :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel11.setText("start");

        accNI.setEditable(false);
        accNI.setPreferredSize(new java.awt.Dimension(400, 20));

        accCID.setPreferredSize(new java.awt.Dimension(400, 20));

        accIP.setEditable(false);
        accIP.setPreferredSize(new java.awt.Dimension(400, 20));

        accOwn.setEditable(false);
        accOwn.setPreferredSize(new java.awt.Dimension(400, 20));

        accRegTime.setEditable(false);
        accRegTime.setPreferredSize(new java.awt.Dimension(400, 20));

        lastlogin.setEditable(false);
        lastlogin.setPreferredSize(new java.awt.Dimension(400, 20));

        timespentonline.setEditable(false);
        timespentonline.setPreferredSize(new java.awt.Dimension(400, 20));

        ipstart.setPreferredSize(new java.awt.Dimension(400, 20));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel12.setText("end");

        ipend.setPreferredSize(new java.awt.Dimension(400, 20));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jLabel5)
                            .add(jLabel4)
                            .add(jLabel8)
                            .add(jLabel10)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel11)
                                .add(jLabel9)))
                        .add(2, 2, 2)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(76, 76, 76)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(accNI, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(accCID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(accIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(accOwn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(accRegTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(lastlogin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(timespentonline, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(ipstart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(22, 22, 22)
                                .add(jLabel12)
                                .add(21, 21, 21)
                                .add(ipend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jLabel1))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(accCID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(accNI, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(accIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(accOwn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(accRegTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lastlogin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(timespentonline, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(ipstart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(ipend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("Account", jPanel1);

        jLabel17.setText("if checked !");

        jLabel16.setText("Warning: High risk of security breach");

        checkflyable.setText("Flyable. If password set, allow");
        checkflyable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkflyable.setMargin(new java.awt.Insets(0, 0, 0, 0));

        checkkey.setText("Operator's Key");
        checkkey.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkkey.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel7.setText("Account Properties");

        overridespam.setText("Override spam security settings");
        overridespam.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        overridespam.setMargin(new java.awt.Insets(0, 0, 0, 0));

        checkrenameable.setText("Can be renamed ?");
        checkrenameable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkrenameable.setMargin(new java.awt.Insets(0, 0, 0, 0));

        checkkickable.setText("Can be kicked ?");
        checkkickable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkkickable.setMargin(new java.awt.Insets(0, 0, 0, 0));

        passsetcheck.setText("Password set ?");
        passsetcheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        passsetcheck.setEnabled(false);
        passsetcheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        checkhidden.setText("Hidden in userlist ?");
        checkhidden.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkhidden.setEnabled(false);
        checkhidden.setMargin(new java.awt.Insets(0, 0, 0, 0));

        sharecheck.setText("Share hidden ?");
        sharecheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sharecheck.setEnabled(false);
        sharecheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        overrideshare.setText("Override share restrictions");
        overrideshare.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        overrideshare.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel15.setText("& password with no matter what CID used");

        jLabel14.setText("account to be used with last nick");

        checknickprotect.setText("Protect last nick of being used by other users.");
        checknickprotect.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checknickprotect.setMargin(new java.awt.Insets(0, 0, 0, 0));

        hubfullcheck.setText("Can enter on hub full ?");
        hubfullcheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hubfullcheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(checknickprotect)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel17))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(checkflyable)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel15))
                    .add(checkrenameable)
                    .add(checkkickable)
                    .add(passsetcheck)
                    .add(checkhidden)
                    .add(sharecheck)
                    .add(hubfullcheck)
                    .add(checkkey)
                    .add(jLabel7)
                    .add(overridespam)
                    .add(overrideshare))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkkey)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(overrideshare)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(overridespam)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hubfullcheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkrenameable)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkkickable)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passsetcheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkhidden)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sharecheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(checkflyable)
                    .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(jLabel17))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checknickprotect)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("Properties", jPanel2);

        jLabel13.setText("Command Availability");

        adc.setText("adc ( ADC advanced control panel)");
        adc.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        adc.setMargin(new java.awt.Insets(0, 0, 0, 0));

        port.setText("port changing");
        port.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        port.setMargin(new java.awt.Insets(0, 0, 0, 0));

        reg.setText("reg command");
        reg.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        reg.setMargin(new java.awt.Insets(0, 0, 0, 0));

        ureg.setText("ureg command");
        ureg.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ureg.setMargin(new java.awt.Insets(0, 0, 0, 0));

        listreg.setText("listreg command");
        listreg.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        listreg.setMargin(new java.awt.Insets(0, 0, 0, 0));

        mass.setText("mass command");
        mass.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mass.setMargin(new java.awt.Insets(0, 0, 0, 0));

        kick.setText("kick command");
        kick.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        kick.setMargin(new java.awt.Insets(0, 0, 0, 0));

        drop.setText("drop command");
        drop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        drop.setMargin(new java.awt.Insets(0, 0, 0, 0));

        unban.setText("unban command");
        unban.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unban.setMargin(new java.awt.Insets(0, 0, 0, 0));

        bancid.setText("bancid command");
        bancid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bancid.setMargin(new java.awt.Insets(0, 0, 0, 0));

        banip.setText("banip command");
        banip.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        banip.setMargin(new java.awt.Insets(0, 0, 0, 0));

        bannick.setText("bannick command");
        bannick.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bannick.setMargin(new java.awt.Insets(0, 0, 0, 0));

        history.setText("history command");
        history.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        history.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cmdhistory.setText("cmdhistory command");
        cmdhistory.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cmdhistory.setMargin(new java.awt.Insets(0, 0, 0, 0));

        info.setText("info command");
        info.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        info.setMargin(new java.awt.Insets(0, 0, 0, 0));

        hideme.setText("hideme command");
        hideme.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hideme.setMargin(new java.awt.Insets(0, 0, 0, 0));

        password.setText("password command");
        password.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        password.setMargin(new java.awt.Insets(0, 0, 0, 0));

        mynick.setText("mynick command");
        mynick.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mynick.setMargin(new java.awt.Insets(0, 0, 0, 0));

        help.setText("help command");
        help.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        help.setMargin(new java.awt.Insets(0, 0, 0, 0));

        about.setText("about command");
        about.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        about.setMargin(new java.awt.Insets(0, 0, 0, 0));

        gui.setText("gui command");
        gui.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gui.setMargin(new java.awt.Insets(0, 0, 0, 0));

        stats.setText("stats command");
        stats.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        stats.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cfg.setText("cfg ( hub configuration panel)");
        cfg.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cfg.setMargin(new java.awt.Insets(0, 0, 0, 0));

        topic.setText("topic command");
        topic.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        topic.setMargin(new java.awt.Insets(0, 0, 0, 0));

        usercount.setText("usercount command");
        usercount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        usercount.setMargin(new java.awt.Insets(0, 0, 0, 0));

        rename.setText("rename command");
        rename.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rename.setMargin(new java.awt.Insets(0, 0, 0, 0));

        restart.setText("restart hub command");
        restart.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        restart.setMargin(new java.awt.Insets(0, 0, 0, 0));

        quit.setText("quit hub command");
        quit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        quit.setMargin(new java.awt.Insets(0, 0, 0, 0));

        listban.setText("listban command");
        listban.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        listban.setMargin(new java.awt.Insets(0, 0, 0, 0));

        grant.setText("grant command");
        grant.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        grant.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel13)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(drop)
                            .add(about)
                            .add(adc)
                            .add(bancid)
                            .add(banip)
                            .add(bannick)
                            .add(cfg)
                            .add(cmdhistory)
                            .add(gui)
                            .add(grant))
                        .add(16, 16, 16)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mynick)
                            .add(info)
                            .add(kick)
                            .add(listban)
                            .add(listreg)
                            .add(mass)
                            .add(hideme)
                            .add(history)
                            .add(password)
                            .add(help))
                        .add(36, 36, 36)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(port)
                            .add(quit)
                            .add(unban)
                            .add(reg)
                            .add(rename)
                            .add(restart)
                            .add(stats)
                            .add(usercount)
                            .add(topic)
                            .add(ureg))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .add(port)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(quit)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rename)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(restart)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stats)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(topic)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(unban)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ureg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(usercount)
                .add(76, 76, 76))
            .add(jPanel3Layout.createSequentialGroup()
                .add(38, 38, 38)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(about))
                    .add(help))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(hideme)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(history)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(info)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(kick)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(listban)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(listreg)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mass)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mynick))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(adc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bancid)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(banip)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bannick)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cfg)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdhistory)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(drop)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(grant)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(password)
                    .add(gui))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("Commands", jPanel3);

        jButton2.setText("Discard");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(275, Short.MAX_VALUE)
                .add(jButton1)
                .add(272, 272, 272))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(293, Short.MAX_VALUE)
                .add(jButton2)
                .add(294, 294, 294))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 636, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 363, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(36, 36, 36)
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
this.setVisible (false);
this.dispose ();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowGainedFocus (java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowGainedFocus
    {//GEN-HEADEREND:event_formWindowGainedFocus
this.setTitle ("Account Edit: "+CID);
jLabel1.setText ("Account on "+Vars.HubName);
nod curAcc=reg_config.getnod (CID);
accCID.setText(CID);
accNI.setText (curAcc.LastNI);
accIP.setText (curAcc.LastIP);
accOwn.setText(curAcc.WhoRegged);

accRegTime.setText(new Date(curAcc.CreatedOn).toString ());
if(curAcc.key)
    checkkey.setSelected(true);
else
    checkkey.setSelected (false);
if(curAcc.Password.length ()>0)
    passsetcheck.setSelected (true);
else
    passsetcheck.setSelected (false);
if(curAcc.HideMe)
    checkhidden.setSelected (true);
else
    checkhidden.setSelected (false);
if(curAcc.HideShare)
    sharecheck.setSelected (true);
else
    sharecheck.setSelected (false);

if(curAcc.overrideshare)
    overrideshare.setSelected (true);
else
    overrideshare.setSelected (false);
if(curAcc.overridespam)
    overridespam.setSelected (true);
else
    overridespam.setSelected (false);
if(curAcc.renameable)
    checkrenameable.setSelected (true);
else
    checkrenameable.setSelected (false);
if(curAcc.kickable)
    checkkickable.setSelected (true);
else
    checkkickable.setSelected (false);

if(curAcc.nickprotected)
    checknickprotect.setSelected (true);
else
    checknickprotect.setSelected (false);
if(curAcc.Password.length ()<1)
    checkflyable.setEnabled (false);
else
    checkflyable.setEnabled (true);
if(curAcc.accountflyable)
    checkflyable.setSelected (true);
else
    checkflyable.setSelected (false);
if(curAcc.overridefull)
    hubfullcheck.setSelected (true);
else
    hubfullcheck.setSelected (false);



lastlogin.setText (new Date(curAcc.LastLogin).toString());
timespentonline.setText (TimeConv.getStrTime(curAcc.TimeOnline));


if(curAcc.myMask.adc)
        
           adc.setSelected (true);
        
        else
            adc.setSelected (false);
        if(curAcc.myMask.port)
        
           port.setSelected (true);
        
        else
            port.setSelected (false);
        if(curAcc.myMask.reg)
           reg.setSelected (true);
        else
            reg.setSelected (false);
        if(curAcc.myMask.ureg)
           ureg.setSelected (true);
        else
            ureg.setSelected (false);
        if(curAcc.myMask.listreg)
           listreg.setSelected (true);
        else
            listreg.setSelected (false);
         if(curAcc.myMask.mass)
           mass.setSelected (true);
        else
            mass.setSelected (false);
        if(curAcc.myMask.kick)
           kick.setSelected (true);
        else
            kick.setSelected (false);
         if(curAcc.myMask.drop)
           drop.setSelected (true);
        else
            drop.setSelected (false);
         if(curAcc.myMask.unban)
           unban.setSelected (true);
        else
            unban.setSelected (false);
         if(curAcc.myMask.bancid)
           bancid.setSelected (true);
        else
            bancid.setSelected (false);
         if(curAcc.myMask.banip)
           banip.setSelected (true);
        else
            banip.setSelected (false);
         if(curAcc.myMask.bannick)
           bannick.setSelected (true);
        else
            bannick.setSelected (false);
         if(curAcc.myMask.history)
           history.setSelected (true);
        else
            history.setSelected (false);
        if(curAcc.myMask.cmdhistory)
           cmdhistory.setSelected (true);
        else
            cmdhistory.setSelected (false);
         if(curAcc.myMask.info)
           info.setSelected (true);
        else
            info.setSelected (false);
        if(curAcc.myMask.hideme)
           hideme.setSelected (true);
        else
            hideme.setSelected (false);
         if(curAcc.myMask.password)
           password.setSelected (true);
        else
            password.setSelected (false);
        if(curAcc.myMask.mynick)
           mynick.setSelected (true);
        else
            mynick.setSelected (false);
        if(curAcc.myMask.rename)
           rename.setSelected (true);
        else
            rename.setSelected (false);

        if(curAcc.myMask.usercount)
           usercount.setSelected (true);
        else
            usercount.setSelected (false);
        if(curAcc.myMask.topic)
           topic.setSelected (true);
        else
            topic.setSelected (false);
        if(curAcc.myMask.cfg)
           cfg.setSelected (true);
        else
            cfg.setSelected (false);
        if(curAcc.myMask.stats)
           stats.setSelected (true);
        else
            stats.setSelected (false);
        if(curAcc.myMask.gui)
           gui.setSelected (true);
        else
            gui.setSelected (false);
       if(curAcc.myMask.about)
           about.setSelected (true);
        else
            about.setSelected (false);
        if(curAcc.myMask.help)
           help.setSelected (true);
        else
            help.setSelected (false);
       if(curAcc.myMask.hideme)
           hideme.setSelected (true);
        else
            hideme.setSelected (false);
       if(curAcc.myMask.restart)
           restart.setSelected (true);
        else
            restart.setSelected (false);
        if(curAcc.myMask.quit)
           quit.setSelected (true);
        else
            quit.setSelected (false);
        if(curAcc.myMask.listban)
           listban.setSelected (true);
        else
            listban.setSelected (false);
        if(curAcc.myMask.grant)
           grant.setSelected (true);
        else
            grant.setSelected (false);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_formFocusGained
    {//GEN-HEADEREND:event_formFocusGained


    }//GEN-LAST:event_formFocusGained

    private void jButton1ActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed

        if(adc.isSelected())
        
            curAcc.myMask.adc=true;
        
        else
            curAcc.myMask.adc=false;
        if(port.isSelected())
            curAcc.myMask.port=true;
        else
            curAcc.myMask.port=false;
        if(reg.isSelected())
            curAcc.myMask.reg=true;
        else 
            curAcc.myMask.reg=false;
        if(ureg.isSelected())
            curAcc.myMask.ureg=true;
        else
            curAcc.myMask.ureg=false;
        if(listreg.isSelected())
            curAcc.myMask.listreg=true;
        else
            curAcc.myMask.listreg=false;
        if(mass.isSelected())
            curAcc.myMask.mass=true;
        else
            curAcc.myMask.mass=false;
        if(kick.isSelected())
            curAcc.myMask.kick=true;
        else
            curAcc.myMask.kick=false;
        if(drop.isSelected())
            curAcc.myMask.drop=true;
        else
            curAcc.myMask.drop=false;
        if(unban.isSelected())
            curAcc.myMask.unban=true;
        else
            curAcc.myMask.unban=false;
        if(bancid.isSelected())
            curAcc.myMask.bancid=true;
        else
            curAcc.myMask.bancid=false;
        if(banip.isSelected())
            curAcc.myMask.banip=true;
        else
            curAcc.myMask.banip=false;
        if(bannick.isSelected())
            curAcc.myMask.bannick=true;
        else
            curAcc.myMask.bannick=false;
        if(history.isSelected())
            curAcc.myMask.history=true;
        else
            curAcc.myMask.history=false;
        if(cmdhistory.isSelected())
            curAcc.myMask.cmdhistory=true;
        else
            curAcc.myMask.cmdhistory=false;
        if(info.isSelected())
            curAcc.myMask.info=true;
        else
            curAcc.myMask.info=false;
        if(hideme.isSelected())
            curAcc.myMask.hideme=true;
        else
            curAcc.myMask.hideme=false;
        if(password.isSelected())
            curAcc.myMask.password=true;
        else
            curAcc.myMask.password=false;
        if(mynick.isSelected())
            curAcc.myMask.mynick=true;
        else
            curAcc.myMask.mynick=false;
        if(rename.isSelected())
            curAcc.myMask.rename=true;
        else
            curAcc.myMask.rename=false;
        if(usercount.isSelected())
            curAcc.myMask.usercount=true;
        else
            curAcc.myMask.usercount=false;
        if(topic.isSelected())
            curAcc.myMask.topic=true;
        else
            curAcc.myMask.topic=false;
        if(cfg.isSelected())
            curAcc.myMask.cfg=true;
        else
            curAcc.myMask.cfg=false;
        if(stats.isSelected())
            curAcc.myMask.stats=true;
        else
            curAcc.myMask.stats=false;
        if(gui.isSelected())
            curAcc.myMask.gui=true;
        else
            curAcc.myMask.gui=false;
        if(about.isSelected())
            curAcc.myMask.about=true;
        else
            curAcc.myMask.about=false;
        if(help.isSelected())
            curAcc.myMask.help=true;
        else
            curAcc.myMask.help=false;
        if(hideme.isSelected())
            curAcc.myMask.hideme=true;
        else
            curAcc.myMask.hideme=false;
        if(restart.isSelected())
            curAcc.myMask.restart=true;
        else
            curAcc.myMask.restart=false;
        if(quit.isSelected())
            curAcc.myMask.quit=true;
        else
            curAcc.myMask.quit=false;
        if(listban.isSelected())
            curAcc.myMask.listban=true;
        else
            curAcc.myMask.listban=false;
        if(grant.isSelected())
            curAcc.myMask.grant=true;
        else
            curAcc.myMask.grant=false;
                
        
        
        if(checkkey.isSelected())
        {
            if(!curAcc.key)
            { 
            
            ClientHandler temp=ClientHandler.FirstClient.NextClient;
            while(temp!=null)
            {
                if(temp.userok==1)
                if(temp.ID.equals (curAcc.CID))
                    break;
                temp=temp.NextClient;
            }
            if(temp!=null)//if registered guy is online
            {
                new Broadcast("BINF "+temp.SessionID+" OP1 RG HO"+String.valueOf (Integer.parseInt (temp.HO)+1)+" HR"+String.valueOf (Integer.parseInt (temp.HR)-1));
                temp.HO=Integer.toString (Integer.parseInt (temp.HO)+1);
                temp.HR=Integer.toString (Integer.parseInt (temp.HR)-1);
                temp.RG="";
                temp.OP="1";
            }
            }
            curAcc.key=true;
        }
        else
        {
             if(curAcc.key)
            { 
            
            ClientHandler temp=ClientHandler.FirstClient.NextClient;
            while(temp!=null)
            {
                if(temp.userok==1)
                   if(temp.ID.equals (curAcc.CID))
                    break;
                temp=temp.NextClient;
            }
            if(temp!=null)//if registered guy is online
            {
                new Broadcast("BINF "+temp.SessionID+" OP RG1 HO"+String.valueOf (Integer.parseInt (temp.HO)-1)+" HR"+String.valueOf (Integer.parseInt (temp.HR)+1));
                temp.HO=Integer.toString (Integer.parseInt (temp.HO)-1);
                temp.HR=Integer.toString (Integer.parseInt (temp.HR)+1);
                temp.OP="";
                temp.RG="1";
            }
            }
            curAcc.key=false;
        }
        if(overrideshare.isSelected ())
          curAcc.overrideshare=true;
        else
            curAcc.overrideshare=false;
        if(overridespam.isSelected ())
          curAcc.overridespam=true;
        else
            curAcc.overridespam=false;
        if(checkrenameable.isSelected ())
          curAcc.renameable=true;
        else
            curAcc.renameable=false;
       if(checkkickable.isSelected ())
          curAcc.kickable=true;
        else
            curAcc.kickable=false;
       if(checkflyable.isSelected ())
       {
          if(!curAcc.setFlyable (true))
              Main.GUI.SetStatus ("Error: To be flyable, account needs a password.");
       }
        else
          curAcc.setFlyable (false);
            
         if(hubfullcheck.isSelected ())
          curAcc.overridefull=true;
        else
            curAcc.overridefull=false;
        
        Main.Server.rewriteregs ();
        
this.setVisible (false);
this.dispose ();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
       
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox about;
    private javax.swing.JTextField accCID;
    private javax.swing.JTextField accIP;
    private javax.swing.JTextField accNI;
    private javax.swing.JTextField accOwn;
    private javax.swing.JTextField accRegTime;
    private javax.swing.JCheckBox adc;
    private javax.swing.JCheckBox bancid;
    private javax.swing.JCheckBox banip;
    private javax.swing.JCheckBox bannick;
    private javax.swing.JCheckBox cfg;
    private javax.swing.JCheckBox checkflyable;
    private javax.swing.JCheckBox checkhidden;
    private javax.swing.JCheckBox checkkey;
    private javax.swing.JCheckBox checkkickable;
    private javax.swing.JCheckBox checknickprotect;
    private javax.swing.JCheckBox checkrenameable;
    private javax.swing.JCheckBox cmdhistory;
    private javax.swing.JCheckBox drop;
    private javax.swing.JCheckBox grant;
    private javax.swing.JCheckBox gui;
    private javax.swing.JCheckBox help;
    private javax.swing.JCheckBox hideme;
    private javax.swing.JCheckBox history;
    private javax.swing.JCheckBox hubfullcheck;
    private javax.swing.JCheckBox info;
    private javax.swing.JTextField ipend;
    private javax.swing.JTextField ipstart;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox kick;
    private javax.swing.JTextField lastlogin;
    private javax.swing.JCheckBox listban;
    private javax.swing.JCheckBox listreg;
    private javax.swing.JCheckBox mass;
    private javax.swing.JCheckBox mynick;
    private javax.swing.JCheckBox overrideshare;
    private javax.swing.JCheckBox overridespam;
    private javax.swing.JCheckBox passsetcheck;
    private javax.swing.JCheckBox password;
    private javax.swing.JCheckBox port;
    private javax.swing.JCheckBox quit;
    private javax.swing.JCheckBox reg;
    private javax.swing.JCheckBox rename;
    private javax.swing.JCheckBox restart;
    private javax.swing.JCheckBox sharecheck;
    private javax.swing.JCheckBox stats;
    private javax.swing.JTextField timespentonline;
    private javax.swing.JCheckBox topic;
    private javax.swing.JCheckBox unban;
    private javax.swing.JCheckBox ureg;
    private javax.swing.JCheckBox usercount;
    // End of variables declaration//GEN-END:variables
    
}
